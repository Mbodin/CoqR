A Coq formalisation of the R programming language

* Overview of the Project

This project is still in early development.

The project is divided in several passes, each providing a more typed
version of the R programming language.
Each pass is related to the previous by the corresponding Relation.v file.

For more details, see my report (not in this repository).

* Building the Project

You need to install Coq and OCaml.
The simplest way is using Opam.

#+BEGIN_SRC bash
    sudo apt install opam
    opam install coq # TODO: Pin version?
#+END_SRC

Some tools are needed.

#+BEGIN_SRC bash
    # Install coq_makefile
#+END_SRC

You need to install Flocq.

#+BEGIN_SRC bash
    opam install coq-flocq
#+END_SRC

You need to compile TLC.

After all that, the Makefile should work.

#+BEGIN_SRC bash
    make
#+END_SRC


* Files Description

** low

This folder is a low-level specification of R.
It is the closest possible to the R source code (in C).

*** Rinternals.v

This file describes the data structures of R as they are in its C code.

*** RinternalsAux.v

Auxiliary definitions and properties about the data structures defined in
Rinternals.v.

*** State.v

This file provides a model for the C memory.

*** Globals.v

This file lists all global variables used in the C source code of R,
that are initialised, then never changed.

This file can take a long time to compile.

*** Monads.v

This file provides monads to manipulate R objects easily.

*** Reval.v

A Coq formalisation of the evaluation functions of R from its C code.
Note that only relevant definitions are translated here. Some are just
reinterpreted in Coq without following the original algorithm of the
C source. See report for more details.

*** Rinit.v

Initialises global variables.

*** Rfeatures.v

A Coq formalisation of additionnal functions of R from its C code.

*** Rinvariants.v

Proofs of some invariants respected by the functions defined in Reval.v,
Rinit.v, and Rfeatures.v.

*** Relation.v

Links the low-level formalisation to the C source code of R.

*** RelationCorrect.v

Proof that the relation defined in Module Relation holds along the
execution of the functions of Reval.

*** Extraction.v

Extract R interpreter into OCaml.

*** low.ml, low.mli

These files are extracted by Extraction.

*** print.ml

Contains various OCaml function to print Coq objects.

*** runR.ml, runR.native

Main interpreter file. It calls the various functions defined in low.ml.

The following command provides some help about it.
#BEGIN_SRC bash
    low/runR.native --help
#END_SRC

** structured

A formalisation of R a little more structured and typed than the low-level
representation.
In particular, the C memory has been abstracted out.

*** Rexpressions.v

In practise, the different language elements of R can not receive
anything. This version presents a version of the semantics in which
these assumptions are made explicit.

*** Relation.v

Links the structured-level formalisation to the low-level one.

** high

A High-level intuition of how R behaves.

*** Rstructures.v

High-level data structures.

*** Relation.v

Links the high-level formalisation to the structured-level one.

*** RReasoning.v

Provides tools to reason about R programs.


* License

I have not yet put any license there, as I consider that the project first
needs to be minimally developped before bothering adding a license.
If you would like to use or contribute to this project and thus need to know
its license, please tell me, and I shall look for the policy of the CMM about
this.

