
# Syntax:
#   nonterminal -> list (atoms) ;
#   Atoms are either a string to be printed, or a nonterminal.
#   Strings accepts three escape characters: \\, \", and \n, associated with the usual meaning.
#   Variants of the arrow -> exists:
#       -often>
#       -rare>
#   The generation algrithm is as followed, parametrised by two probabilities Poften and Prare:
#   - with probability Poften, a reduction marked as -often> is taken, randomly (uniformly).
#   - otherwise, with probability Prare, a reduction marked either as -often> or -> is taken, randomly (uniformly).
#   - otherwise, a reduction marked either as -often>, ->, or -rare> is taken, randomly (uniformly).
#   This algorithm is repeated until no nonterminal are left.

    start -> program ;

    variable -> "a" ;
    variable -> "b" ;
    variable -> "x" ;
    variable -> "d" ;
    variable -> "e" ;
    variable -> "f" ;

    string -often> "\"" stringcontent "\"" ;
    string -> "'\" stringcontent "'" ;

    stringcontent -> ;
    stringcontent -> "a" ;
    stringcontent -> "b" ;
    stringcontent -> "c" ;
    stringcontent -> " " ;
    stringcontent -> stringcontent stringcontent ;

    number -> sign digits ;
    number -> sign digits "L" ;
    number -> sign digits "i" ;
    number -> sign digits "e" digits ;

    sign -> ;
    sign -> "-" ;
    sign -rare> "+" ;

    digits -often> digit digits ;
    digits -> digit ;

    digit -> "0" ;
    digit -> "1" ;
    digit -> "2" ;
    digit -> "3" ;
    digit -> "4" ;
    digit -> "5" ;
    digit -> "6" ;
    digit -> "7" ;
    digit -> "8" ;
    digit -> "9" ;

    function -> "function () " programret ;
    function -> "function (" argument ") " programret ;
    function -> "function (" argument ", " argument ") " programret ;
    function -rare> "function (" argument ", " argument ", " argument ") " programret ;
    function -rare> "function (" argument ", " argument ", " argument ", " argument ") " programret ;

    argument -often> variable ;
    argument -> variable " = " expression ;
    argument -rare> "..." ;

    programret -> expression ;
    programret -> "{\n" program "\n}" ;
    programret -> "{\n" program "\n" expression " }" ;

    programatom -> lefthandside asn expression ;
    programatom -rare> lefthandside asn lefthandside asn expression ;
    programatom -rare> lefthandside asn lefthandside asn lefthandside asn expression ;
    programatom -rare> expression " -> " lefthandside ;
    programatom -rare> expression " -> " lefthandside " -> " lefthandside ;
    programatom -rare> lefthandside asn expression " -> " lefthandside ;

    asn -often> " <- " ;
    asn -> " <<- " ;
    asn -> " = " ;

    programatom -> exprapp ;
    programatom -rare> expression ;
    programatom -rare> "{ " program " }" ;

    programatom -> "if (" expression " programatom ;
    programatom -> "if (" expression " programatom " else " programatom ;
    programatom -> "if (" expression " {\n" program " }" ;
    programatom -> "if (" expression " {\n" program "\n} else {\n" program " }" ;

    program -often> programatom " ;\n" program ;
    program -> ;

    lefthandside -often> variable ;
    lefthandside -rare> "attr (" lefthandside ", " string ")" ;
    lefthandside -rare> string ;

    exprapp -> exprfun " ()" ;
    exprapp -> exprfun " (" expression ")" ;
    exprapp -> exprfun " (" expression ", " expression ")" ;
    exprapp -> exprfun " (" expression ", " expression ", " expression ")" ;
    exprapp -> exprfun " (" expression ", " expression ", " expression ", " expression ")" ;

    exprfun -> variable ;
    exprfun -> function ;
    exprfun -> primitivefun ;
    exprfun -rare> exprapp ;

    expression -> exprfun ;
    expression -> exprapp ;
    expression -> exprlookup ;
    expression -> exprarith ;
    expression -> exprbool ;
    expression -> primitive ;
    expression -> exprcst ;
    expression -rare> ".." digit ;

    exprarith -often> variable ;
    exprarith -often> "(" exprarith ")" ;
    exprarith -> exprarith " + " exprarith ;
    exprarith -> exprarith " - " exprarith ;
    exprarith -> exprarith " * " exprarith ;
    exprarith -> exprarith " / " exprarith ;
    exprarith -> exprarith " ^ " exprarith ;
    exprarith -> exprarith " %% " exprarith ;
    exprarith -> exprarith " : " exprarith ;
    exprarith -rare> exprarith " ~ " exprarith ;
    exprarith -> expression ;
    exprarith -rare> exprbool ;

    exprbool -often> variable ;
    exprbool -often> "(" exprbool ")" ;
    exprbool -> exprarith " > " exprarith ;
    exprbool -> exprarith " >= " exprarith ;
    exprbool -> exprarith " < " exprarith ;
    exprbool -> exprarith " <= " exprarith ;
    exprbool -> exprarith " == " exprarith ;
    exprbool -> exprarith " != " exprarith ;
    exprbool -> exprbool " & " exprbool ;
    exprbool -> exprbool " | " exprbool ;
    exprbool -> "! " exprbool ;
    exprbool -rare> exprarith ;

    exprlookup -> expression " [" expression "]" ;
    exprlookup -> expression " [[" expression "]]" ;
    exprlookup -rare> expression " [" expression ", " expression "]" ;
    exprlookup -rare> expression " [[" expression ", " expression "]]" ;

    exprcst -> string ;
    exprcst -> number ;

    primitive -> primitivefun ;
    primitive -> primitiveconstant ;

    primitivefun -> "c" ;
    primitivefun -> primitiveis ;
    primitivefun -> primitiveas ;
    primitivefun -> primitivesummary ;
    primitivefun -> "attr" ;

    primitiveis -> "is.null" ;
    primitiveis -> "is.logical" ;
    primitiveis -> "is.integer" ;
    primitiveis -> "is.double" ;
    primitiveis -> "is.complex" ;
    primitiveis -> "is.character" ;
    primitiveis -> "is.symbol" ;
    primitiveis -> "is.name" ;
    primitiveis -> "is.environment" ;
    primitiveis -> "is.list" ;
    primitiveis -> "is.pairlist" ;
    primitiveis -> "is.expression" ;
    primitiveis -> "is.numeric" ;
    primitiveis -> "is.matrix" ;
    primitiveis -> "is.array" ;
    primitiveis -> "is.atomic" ;
    primitiveis -> "is.recursive" ;
    primitiveis -> "is.call" ;
    primitiveis -> "is.language" ;
    primitiveis -> "is.function" ;
    primitiveis -> "is.single" ;
    primitiveis -> "is.na" ;
    primitiveis -> "is.nan" ;
    primitiveis -> "is.finite" ;
    primitiveis -> "is.infinite" ;
    primitiveis -> "is.vector" ;

    primitiveas -> "as.character" ;
    primitiveas -> "as.integer" ;
    primitiveas -> "as.double" ;
    primitiveas -> "as.numeric" ;
    primitiveas -> "as.complex" ;
    primitiveas -> "as.logical" ;
    primitiveas -> "as.call" ;
    primitiveas -> "as.environment" ;
    primitiveas -> "as.vector" ;

    primitivesummary -> "sum" ;
    primitivesummary -> "min" ;
    primitivesummary -> "max" ;
    primitivesummary -> "prod" ;
    primitivesummary -> "mean" ;
    primitivesummary -> "range" ;

    primitiveconstant -> "NULL" ;
    primitiveconstant -> "TRUE" ;
    primitiveconstant -> "FALSE" ;
    primitiveconstant -> "NA" ;

